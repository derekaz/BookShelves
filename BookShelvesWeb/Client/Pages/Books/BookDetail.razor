@using BlazorApp.Shared
@inject HttpClient Http

<div class="modal fade show d-block" tabindex="-1" role="dialog" id="bookDetail">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" role="document" style="z-index: 1050">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Book</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">x</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@BookObject">
                    <div class="form-group">
                        <label for="Title" class="control-label">Title</label>
                        <InputText id="title" for="Title" class="form-control" @bind-Value="@BookObject.Title" />
                    </div>
                    <div class="form-group">
                        <label for="Author" class="control-label">Author</label>
                        <InputText for="Author" class="form-control" @bind-Value="@BookObject.Author" />
                    </div>

                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick="SubmitForm">Submit</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
            </div>
        </div>
    </div>
</div>




@*<h1>Library - Add a book</h1>

<hr/>

<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="Title" class="control-label">Title</label>
                <input for="Title" class="form-control" @bind="@BookObject.Title" />
            </div>
            <div class="form-group">
                <label for="Author" class="control-label">Author</label>
                <input for="Author" class="form-control" @bind="@BookObject.Author" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-default" @onclick="@(async () => await CreateBook())">Save</button>
                <button class="btn" @onclick="@cancel">Cancel</button>
            </div>
        </form>
    </div>
</div>
*@

@code 
{
    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public Book BookObject { get; set; } = new Book();

    string message = "Okey Dokey";

    private async Task SubmitForm()
    {
        if (String.IsNullOrEmpty(BookObject.Id))
        {
            var result = await Http.PostAsJsonAsync("api/books/new", BookObject);
            if (result.IsSuccessStatusCode)
            {
                message = $"'{BookObject.Title}' has been added.";
                await BlazoredModal.CloseAsync(ModalResult.Ok(message));
            }
        }
        else
        {
            var result = await Http.PostAsJsonAsync("api/books/edit", BookObject);
            if (result.IsSuccessStatusCode)
            {
                message = $"'{BookObject.Title}' has been updated.";
                await BlazoredModal.CloseAsync(ModalResult.Ok(message));
            }
        }
    }

    private async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Cancel());
    private async Task Cancel() => await BlazoredModal.CancelAsync();

    //List<string> BookStatusList = new List<string>() { "New", "In Progress", "Completed" };

    //protected async Task CreateBook()
    //{
    //    await Http.PostAsJsonAsync("api/books/new", book);
    //    navigation.NavigateTo("/library/library");
    //}

    //void cancel()
    //{
    //    navigation.NavigateTo("/library");
    //}
}