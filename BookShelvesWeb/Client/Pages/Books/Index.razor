@page "/books"
@using BlazorApp.Shared 
@inject HttpClient Http
@attribute [Authorize(Roles = "administrator")]

<h1>Books</h1>

<div>
    @*<a href="/library/addbook">Create</a>*@
    @*<input type="button" data-toggle="modal" data-target="#bookDetail" class="btn btn-primary" value="Add Book" @onclick="(() => Show())" />*@
    @*<button @onclick="@(()=>modal.Show<BookDetail>("Book Modal"))" class="btn btn-primary">Add Book</button>*@
    <button @onclick="(() => AddAsync())" class="btn btn-primary">Add Book</button>
</div>

<p>@message</p>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th></th>
@*                <th>Temp. (F)</th>
                <th>Summary</th>
*@            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>
                        <input type="button" class="btn btn-primary" @onclick="(() => EditAsync(book))" value="Edit" />
                        <input type="button" class="btn btn-primary" @onclick="(() => DeleteAsync(book))" value="Delete" />
                    </td>
@*                  <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
*@                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Book[] books = new Book[]{};
    Book bookObject = new Book();
    bool ShowPopup { get; set; }
    private string message = string.Empty;

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await Http.GetFromJsonAsync<Book[]>("/api/books") ?? new Book[] { };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async void ShowAsync()
    {
        var parameters = new ModalParameters()
            .Add(nameof(BookDetail.BookObject), bookObject);
        var options = new ModalOptions() { UseCustomLayout = true };
        var form = Modal.Show<BookDetail>("Book Modal", parameters, options);
        var result = await form.Result;
        if (result.Confirmed)
        {
            message = result?.Data?.ToString() ?? "";

            books = await Http.GetFromJsonAsync<Book[]>("/api/books") ?? new Book[] { };
        }
        StateHasChanged();
    }

    private async void AddAsync()
    {
        InitializeBookObject();
        ShowAsync();
    }

    private async void EditAsync(Book book)
    {
        bookObject = book;
        ShowAsync();
    }

    private async void DeleteAsync(Book book)
    {
        var result = await Http.DeleteAsync($"/api/books/{book.Id}");

        if (result.IsSuccessStatusCode)
        {
            message = "Book deleted";

            books = await Http.GetFromJsonAsync<Book[]>("/api/books") ?? new Book[] { };
        }
        StateHasChanged();
    }

    private void InitializeBookObject()
    {
        bookObject = new Book() { Title = "Replace Me" };
    }
}
