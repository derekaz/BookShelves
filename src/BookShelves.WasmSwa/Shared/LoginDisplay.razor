@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@*inject SignOutSessionStateManager SignOutManager*@
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        Hello, @GetName().Result! @*@context.User.Identity?.Name!*@
        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code{
    private async Task<string?> GetName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdentity = (System.Security.Claims.ClaimsIdentity)(authState.User.Identity ?? new System.Security.Claims.ClaimsIdentity());
        var claims = userIdentity.Claims;
        var roleClaimType = userIdentity.RoleClaimType;
        var roles1 = claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role).ToList();
        var roles2 = claims.Where(c => c.Type == roleClaimType).ToList();

        return authState?.User?.Identity?.Name;
    }

    private void BeginLogout(MouseEventArgs args)
    {
        Navigation.NavigateToLogout("authentication/logout");
    }
}
