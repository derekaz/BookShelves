@page "/books2"

@using BookShelves.Data
@inject BookDataService booksService

<h1>Books</h1>

<p>All books.</p>

<div>
    <button @onclick="(() => AddAsync())" class="btn btn-primary">Add Book</button>
</div>

<p>@message</p>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>
                        <input type="button" class="btn btn-primary" @onclick="(() => EditAsync(book))" value="Edit" />
                        <input type="button" class="btn btn-primary" @onclick="(() => DeleteAsync(book))" value="Delete" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Book> books;
    private string message = string.Empty;

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        books = await booksService.GetBooksAsync();
    }

    private async void ShowDetailAsync(Book book, string titleText)
    {
        var parameters = new ModalParameters()
            .Add(nameof(BookDetail.BookObject), book)
            .Add(nameof(BookDetail.TitleText), titleText);
        var options = new ModalOptions() { UseCustomLayout = true };
        var form = Modal.Show<BookDetail>("Book Modal", parameters, options);
        var result = await form.Result;
        if (result.Confirmed)
        {
            message = result?.Data?.ToString() ?? "";

            books = await booksService.GetBooksAsync() ?? new Book[] { };
        }
        else
        {
            if (book.Id == 0)
                message = "Add canceled";
            else
                message = "Edit canceled";
        }
        
        StateHasChanged();
    }

    private void AddAsync()
    {
        var book = new Book();
        ShowDetailAsync(book, "New Book");
    }

    private void EditAsync(Book book)
    {
        ShowDetailAsync(book, "Edit Book");
    }

    private async void DeleteAsync(Book book)
    {
        var parameters = new ModalParameters()
            .Add(nameof(BookDelete.BookObject), book);
        var options = new ModalOptions() { UseCustomLayout = true };
        var form = Modal.Show<BookDelete>("Book Modal", parameters, options);
        var result = await form.Result;
        if (result.Confirmed)
        {
            if (await booksService.DeleteBook(book.Id))
            {
                message = $"'{book.Title}' deleted";

                books = await booksService.GetBooksAsync() ?? new Book[] { };
            }
            StateHasChanged();
        }
        else
        {
            message = "Delete canceled";
            StateHasChanged();
        }
    }
}
