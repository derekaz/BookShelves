@page "/books"
@using Blazored.Modal
@using Blazored.Modal.Services
@using BookShelves.Shared
@using BookShelves.Shared.DataInterfaces
@inject IBooksDataService DataService 
@inject ILogger Logger
@attribute [Authorize(Roles = "Administrator")]

<h1>Books</h1>

<div>
    <button @onclick="(() => AddAsync())" class="btn btn-primary">Add Book</button>
</div>

<p>@message</p>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Author</th>
                <th></th>
@*                <th>Temp. (F)</th>
                <th>Summary</th>
*@            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.IdValue</td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>
                        <input type="button" class="btn btn-primary" @onclick="(() => EditAsync(book))" value="Edit" />
                        <input type="button" class="btn btn-primary" @onclick="(() => DeleteAsync(book))" value="Delete" />
                    </td>
@*                  <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
*@                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<IBook> books = new List<IBook>();
    private string message = string.Empty;

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await DataService.GetBooksAsync() ?? new List<IBook>() { };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "BookShelves.Shared.Components.Pages.Books.Index:OnInitializedAsync-Exception");
        }
    }

    private async void ShowDetailAsync(IBook book, string titleText)
    {
        var parameters = new ModalParameters()
            .Add(nameof(BookDetail.BookObject), book)
            .Add(nameof(BookDetail.TitleText), titleText);
        var options = new ModalOptions() { UseCustomLayout = true };
        var form = Modal.Show<BookDetail>("Book Modal", parameters, options);
        var result = await form.Result;
        if (result.Confirmed)
        {
            message = result?.Data?.ToString() ?? "";

            books = await DataService.GetBooksAsync() ?? new List<IBook>() { };
        }
        else
        {
            if (String.IsNullOrEmpty(book.IdValue))
                message = "Add canceled";
            else
                message = "Edit canceled";
        }
        StateHasChanged();
    }

    private void AddAsync()
    {
        var book = InitializeBookObject();
        ShowDetailAsync(book, "New Book");
    }

    private void EditAsync(IBook book)
    {
        ShowDetailAsync(book, "Edit Book");
    }

    private async void DeleteAsync(IBook book)
    {
        var parameters = new ModalParameters()
            .Add(nameof(BookDelete.BookObject), book);
        var options = new ModalOptions() { UseCustomLayout = true };
        var form = Modal.Show<BookDelete>("Book Modal", parameters, options);
        var result = await form.Result;
        if (result.Confirmed)
        {
            var deleteResult = await DataService.DeleteBookAsync(book);

            if (deleteResult)
            {
                message = $"'{book.Title}' deleted";

                books = await DataService.GetBooksAsync() ?? new List<IBook>() { };
            }
            StateHasChanged();
        }
        else
        {
            message = "Delete canceled";
            StateHasChanged();
        }
    }

    private IBook InitializeBookObject()
    {
        return DataService.InitializeBookInstance();
    }
}
